// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: management/v1/manager.proto

package managementv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/caldog20/calnet/proto/gen/management/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ManagementServiceName is the fully-qualified name of the ManagementService service.
	ManagementServiceName = "management.v1.ManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManagementServiceLoginProcedure is the fully-qualified name of the ManagementService's Login RPC.
	ManagementServiceLoginProcedure = "/management.v1.ManagementService/Login"
	// ManagementServiceNetworkUpdateProcedure is the fully-qualified name of the ManagementService's
	// NetworkUpdate RPC.
	ManagementServiceNetworkUpdateProcedure = "/management.v1.ManagementService/NetworkUpdate"
	// ManagementServiceServerKeyProcedure is the fully-qualified name of the ManagementService's
	// ServerKey RPC.
	ManagementServiceServerKeyProcedure = "/management.v1.ManagementService/ServerKey"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	managementServiceServiceDescriptor             = v1.File_management_v1_manager_proto.Services().ByName("ManagementService")
	managementServiceLoginMethodDescriptor         = managementServiceServiceDescriptor.Methods().ByName("Login")
	managementServiceNetworkUpdateMethodDescriptor = managementServiceServiceDescriptor.Methods().ByName("NetworkUpdate")
	managementServiceServerKeyMethodDescriptor     = managementServiceServiceDescriptor.Methods().ByName("ServerKey")
)

// ManagementServiceClient is a client for the management.v1.ManagementService service.
type ManagementServiceClient interface {
	Login(context.Context, *connect.Request[v1.NaclMessage]) (*connect.Response[v1.NaclMessage], error)
	NetworkUpdate(context.Context, *connect.Request[v1.NaclMessage]) (*connect.Response[v1.NaclMessage], error)
	ServerKey(context.Context, *connect.Request[v1.ServerKeyRequest]) (*connect.Response[v1.ServerKeyResponse], error)
}

// NewManagementServiceClient constructs a client for the management.v1.ManagementService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &managementServiceClient{
		login: connect.NewClient[v1.NaclMessage, v1.NaclMessage](
			httpClient,
			baseURL+ManagementServiceLoginProcedure,
			connect.WithSchema(managementServiceLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		networkUpdate: connect.NewClient[v1.NaclMessage, v1.NaclMessage](
			httpClient,
			baseURL+ManagementServiceNetworkUpdateProcedure,
			connect.WithSchema(managementServiceNetworkUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		serverKey: connect.NewClient[v1.ServerKeyRequest, v1.ServerKeyResponse](
			httpClient,
			baseURL+ManagementServiceServerKeyProcedure,
			connect.WithSchema(managementServiceServerKeyMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// managementServiceClient implements ManagementServiceClient.
type managementServiceClient struct {
	login         *connect.Client[v1.NaclMessage, v1.NaclMessage]
	networkUpdate *connect.Client[v1.NaclMessage, v1.NaclMessage]
	serverKey     *connect.Client[v1.ServerKeyRequest, v1.ServerKeyResponse]
}

// Login calls management.v1.ManagementService.Login.
func (c *managementServiceClient) Login(ctx context.Context, req *connect.Request[v1.NaclMessage]) (*connect.Response[v1.NaclMessage], error) {
	return c.login.CallUnary(ctx, req)
}

// NetworkUpdate calls management.v1.ManagementService.NetworkUpdate.
func (c *managementServiceClient) NetworkUpdate(ctx context.Context, req *connect.Request[v1.NaclMessage]) (*connect.Response[v1.NaclMessage], error) {
	return c.networkUpdate.CallUnary(ctx, req)
}

// ServerKey calls management.v1.ManagementService.ServerKey.
func (c *managementServiceClient) ServerKey(ctx context.Context, req *connect.Request[v1.ServerKeyRequest]) (*connect.Response[v1.ServerKeyResponse], error) {
	return c.serverKey.CallUnary(ctx, req)
}

// ManagementServiceHandler is an implementation of the management.v1.ManagementService service.
type ManagementServiceHandler interface {
	Login(context.Context, *connect.Request[v1.NaclMessage]) (*connect.Response[v1.NaclMessage], error)
	NetworkUpdate(context.Context, *connect.Request[v1.NaclMessage]) (*connect.Response[v1.NaclMessage], error)
	ServerKey(context.Context, *connect.Request[v1.ServerKeyRequest]) (*connect.Response[v1.ServerKeyResponse], error)
}

// NewManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementServiceHandler(svc ManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managementServiceLoginHandler := connect.NewUnaryHandler(
		ManagementServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(managementServiceLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceNetworkUpdateHandler := connect.NewUnaryHandler(
		ManagementServiceNetworkUpdateProcedure,
		svc.NetworkUpdate,
		connect.WithSchema(managementServiceNetworkUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managementServiceServerKeyHandler := connect.NewUnaryHandler(
		ManagementServiceServerKeyProcedure,
		svc.ServerKey,
		connect.WithSchema(managementServiceServerKeyMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/management.v1.ManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagementServiceLoginProcedure:
			managementServiceLoginHandler.ServeHTTP(w, r)
		case ManagementServiceNetworkUpdateProcedure:
			managementServiceNetworkUpdateHandler.ServeHTTP(w, r)
		case ManagementServiceServerKeyProcedure:
			managementServiceServerKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementServiceHandler struct{}

func (UnimplementedManagementServiceHandler) Login(context.Context, *connect.Request[v1.NaclMessage]) (*connect.Response[v1.NaclMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("management.v1.ManagementService.Login is not implemented"))
}

func (UnimplementedManagementServiceHandler) NetworkUpdate(context.Context, *connect.Request[v1.NaclMessage]) (*connect.Response[v1.NaclMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("management.v1.ManagementService.NetworkUpdate is not implemented"))
}

func (UnimplementedManagementServiceHandler) ServerKey(context.Context, *connect.Request[v1.ServerKeyRequest]) (*connect.Response[v1.ServerKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("management.v1.ManagementService.ServerKey is not implemented"))
}
