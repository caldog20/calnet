edition = "2023";


package management.v1;

import "google/protobuf/go_features.proto";
option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/caldog20/calnet/proto/gen/management/v1;managementv1";

service ManagementService {
  rpc Login(NaclMessage) returns (NaclMessage);
  rpc NetworkUpdate(NaclMessage) returns (NaclMessage);
  rpc ServerKey(ServerKeyRequest) returns (ServerKeyResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message NaclMessage {
  // Control key sent in header
  string node_key = 1;
  bytes data = 2;
}

message ServerKeyRequest {}
message ServerKeyResponse {
  string server_key = 1;
}

message LoginRequest {
  string hostname = 1;
  string provision_key = 5;
}

message LoginResponse {}

//message Metadata {
//  string hostname = 1;
//  // OS
//  // Version
//}

message NetworkUpdateRequest {
  // Normal Polling for updates
  bool poll = 1;
//  repeated Endpoint endpoints = 2;
}

enum NetworkUpdateType {
  NONE = 0;
  FULL = 1;
  NEW_PEERS = 2;
  CHANGED_PEERS = 3;
  REMOVED_PEERS = 4;
  CONFIG = 5;
}

message NetworkUpdateResponse {
  NetworkUpdateType type = 1;
  repeated RemotePeerConfig new_peers = 2;
  repeated RemotePeerConfig changed_peers = 3;
  repeated RemotePeerConfig removed_peers = 4;
  NodeConfig config = 5;
}

message NodeConfig {
  uint64 id = 1;
  string prefix = 2;
  string tunnel_ip = 3;
}

message RemotePeerConfig {
  uint64 id = 1;
  string public_key = 2;
  string hostname = 3;
  string tunnel_ip = 4;
  bool connected = 5;
//  repeated Endpoint endpoints = 6;
}

//message Endpoint {
//  string endpoint = 1;
//  bool private = 2;
//}



enum IceMessageType {
  OFFER = 0;
  ANSWER = 1;
  CANDIDATE = 2;
}

message IceCredentials {
  string ufrag = 1;
  string pwd = 2;
}

message IceCandidate {
  string candidate = 1;
}

message IceMessage {
  IceMessage type = 1;
  string peer_public_key = 2;
  oneof message {
    IceCredentials creds = 3;
    IceCandidate candidate = 4;
  }
}